Filename: Classes.py
Path: Classes.py

import pandas as pd
from utils import *
from evaluation import *

class Server:
    def __init__(self, givens, generation, latency, data_center, identifier):
        self.generation = generation
        self.latency_sensitivity = latency
        self.data_center = data_center
        self.moved_this_step = False
        self.identifier = identifier
        # Using properties to dynamically fetch data when needed
        self._givens = givens
        self.deployed = False
        self.operational_time = 0

    @property
    def status(self):
        return {
            "type": self.generation,
            "capacity_used": self.capacity if self.deployed else 0,
            "uptime": self.operational_time,
            "latency_sensitivity": self.latency_sensitivity
        }

    @property
    def server_data(self):
        # Dynamically fetches server data
        return self._givens.servers_df[self._givens.servers_df['server_generation'] == self.generation].iloc[0]

    @property
    def selling_price_data(self):
        # Dynamically fetches selling price data
        return self._givens.selling_prices_df[self._givens.selling_prices_df['server_generation'] == self.generation]

    @property
    def capacity(self):
        return self.server_data['capacity']

    @property
    def slots_needed(self):
        return self.server_data['slots_size']

    @property
    def energy_consumption(self):
        return self.server_data['energy_consumption']

    @property
    def purchase_price(self):
        return self.server_data['purchase_price']

    @property
    def life_expectancy(self):
        return self.server_data['life_expectancy']

    @property
    def cost_of_moving(self):
        return self.server_data['cost_of_moving']

    @property
    def maintenance_fee(self):
        return self.server_data['average_maintenance_fee']

    @property
    def selling_price(self):
        # Dynamic fetching based on latency sensitivity
        price_row = self.selling_price_data[self.selling_price_data['latency_sensitivity'] == self.latency_sensitivity]
        return price_row['selling_price'].iloc[0] if not price_row.empty else None

    def age_server(self):
        if self.deployed:
            self.operational_time += 1
            if self.operational_time >= self.life_expectancy:
                self.decommission()

    def deploy(self):
        self.deployed = True
        self.remaining_life = self.life_expectancy
        self.operational_time = 0

    def decommission(self):
        self.deployed = False
        print(f"Server {self.identifier} decommissioned.")

    def update_life(self, time):
        self.remaining_life -= time
        self.operational_time += 1
        if self.remaining_life <= 0 or self.operational_time >= self.life_expectancy:
            self.decommission()

    def update(self):
        self.update_life(1)

class DataCenter:
    def __init__(self, givens, identifier):
        self._givens = givens
        self.identifier = identifier
        self.datacenter_data = self._givens.datacenters_df[self._givens.datacenters_df['datacenter_id'] == identifier].iloc[0]
        self.servers = []  # List of Server objects

    def summary(self):
        return {
            "total_capacity": sum(server.capacity for server in self.servers),
            "available_capacity": sum(server.capacity for server in self.servers if not server.deployed),
            "energy_cost": self.cost_of_energy,
            "servers": [server.status for server in self.servers]
        }

    @property
    def slots_capacity(self):
        return self.datacenter_data['slots_capacity']

    @property
    def cost_of_energy(self):
        return self.datacenter_data['cost_of_energy']

    @property
    def latency_sensitivity(self):
        return self.datacenter_data['latency_sensitivity']

    @property
    def filled_slots(self):
        return sum(server.slots_needed for server in self.servers if server.deployed)

    @property
    def empty_slots(self):
        return self.slots_capacity - self.filled_slots

    def add_server(self, server):
        if self.can_add_server(server):
            self.servers.append(server)
            server.deploy()
            print(f"Server {server.generation} added to {self.identifier}")
        else:
            print("Not enough slots to add this server")

    def dismiss_servers(self):
        """ Method to remove servers that are no longer operational due to end of life. """
        for server in list(self.servers):
            if server.remaining_life <= 0:
                self.remove_server(server)

    def remove_server(self, server):
        if server in self.servers:
            self.servers.remove(server)
            server.decommission()
            print(f"Server {server.generation} removed from {self.identifier}")

    def can_add_server(self, server):
        return self.empty_slots >= server.slots_needed

    def has_capacity_for_servers(self, required_slots):
        """
        Check if the data center has enough empty slots to accommodate a given number of slots.
        
        Args:
            required_slots (int): Number of slots required for new servers.

        Returns:
            bool: True if there is enough capacity, False otherwise.
        """
        return self.empty_slots >= required_slots

    def simulate_time_step(self):
        for server in self.servers:
            server.age_server()

    def __str__(self):
        return f"DataCenter {self.identifier}: Capacity {self.slots_capacity}, Empty Slots {self.empty_slots}"

class Inventory:
    def __init__(self, givens):
        self._givens = givens
        self.datacenters = [DataCenter(givens, dc_id) for dc_id in self._givens.datacenters_df['datacenter_id']]

    def update_servers(self):
        """ Synchronizes the state of all servers across datacenters, checking end-of-life and updating capacities. """
        for datacenter in self.datacenters:
            for server in datacenter.servers[:]:  # Copy to avoid modification during iteration
                if server.remaining_life <= 0:
                    datacenter.remove_server(server)
                else:
                    server.update()

    def simulate_time_step_servers(self):
        """ Advances the simulation by one time step for each server. """
        for datacenter in self.datacenters:
            datacenter.simulate_time_step()

    def get_datacenter_by_id(self, identifier):
        """ Returns the datacenter object by its identifier. """
        return next((dc for dc in self.datacenters if dc.identifier == identifier), None)
    
    def get_total_energy_cost(self):
        total_cost = 0
        for server in self.servers:
            if server.deployed:
                total_cost += server.energy_consumption * self.cost_of_energy
        return total_cost
    
    def get_total_costs(self):
        energy_cost = self.get_total_energy_cost()
        maintenance_cost = sum(dc.get_total_maintenance_cost() for dc in self.datacenters)
        purchase_cost = sum(dc.get_total_purchase_cost() for dc in self.datacenters)
        moving_cost = sum(dc.get_total_moving_cost() for dc in self.datacenters)
        return {
            'energy_cost': energy_cost,
            'maintenance_cost': maintenance_cost,
            'purchase_cost': purchase_cost,
            'moving_cost': moving_cost
        }

    # def predictive_scaling(self):
    #     predicted_load = self.predict_load()
    #     self.adjust_server_operations(predicted_load)
    
    def get_aggregated_server_capacities(self):
        """ Aggregates server capacities by server generation across all datacenters. """
        capacity_data = []
        for dc in self.datacenters:
            for server in dc.servers:
                if server.deployed:
                    capacity_data.append({
                        'server_generation': server.generation,
                        'capacity': server.capacity
                    })
        df = pd.DataFrame(capacity_data)
        if not df.empty:
            aggregated = df.groupby('server_generation')['capacity'].sum()
            return aggregated.to_frame('capacity')  # Convert to DataFrame explicitly
        else:
            return pd.DataFrame(columns=['capacity'])  # Ensure it's always a DataFrame



    def __str__(self):
        """ Provides a string representation of the inventory for debugging purposes. """
        return f"Inventory with Datacenters: {[dc.identifier for dc in self.datacenters]}"

class ProblemData:
    def __init__(self):
        self.datacenters_df, self.servers_df, self.selling_prices_df = load_problem_data_without_demand()

    def __str__(self):
        return f"ProblemData: {len(self.datacenters_df)} datacenters, {len(self.servers_df)} servers, {len(self.selling_prices_df)} selling prices"

class InputDemandDataSample:
    def __init__(self):
        self.demand_data_df = load_demand()

    def __str__(self):
        return f"InputDemandDataSample: {len(self.demand_data_df)} rows of demand data"

class InputDemandDataActual:
    def __init__(self, sample_data=InputDemandDataSample(), seed=None):
        np.random.seed(seed)
        self.demand_data_df = self.adjust_demand_with_hackathon_method(sample_data.demand_data_df)

    def adjust_demand_with_hackathon_method(self, demand_df):
        return get_actual_demand(demand_df)

    def __str__(self):
        return f"InputDemandDataActual: {len(self.demand_data_df)} rows of adjusted demand data"
    
# Assuming you have historical demand data loaded and a method to predict future demand
# class DemandForecaster:
#     def __init__(self, historical_data):
#         self.historical_data = historical_data

#     def predict_demand(self, future_periods):
#         # Implement your forecasting model here
#         # This could be a simple time series model or a more complex machine learning model
#         pass
#     def plan_capacity(self, demand_forecasts):
#         # Calculate required capacity for each server type and data center
#         # Make decisions on server purchases or re-allocations
#         pass
#     def automate_deployment(self, capacity_plan):
#         # Automatically deploy or re-allocate servers according to the planned capacity
#         # Could interface with virtualization management platforms or use API calls to manage physical servers
#         pass

Filename: application_training.py
Path: application_training.py

from stable_baselines3 import PPO
from envs.server_management_env import ServerManagementEnv
from Classes import ProblemData, InputDemandDataSample, InputDemandDataActual

def train_model():
    givens = ProblemData()
    sample_demand = InputDemandDataSample()
    actual_demand = InputDemandDataActual(sample_data=sample_demand, seed=42)

    env = ServerManagementEnv(givens, actual_demand)
    model = PPO('MlpPolicy', env, verbose=1)
    model.learn(total_timesteps=100)
    model.save("server_management_rl_model")

if __name__ == "__main__":
    train_model()


Filename: server_management_env.py
Path: envs/server_management_env.py

import gym
from gym import spaces
import numpy as np
from Classes import *
from application import *
from mysolution import *

class ServerManagementEnv(gym.Env):
    def __init__(self, givens, demand_data):
        super(ServerManagementEnv, self).__init__()
        self.givens = givens
        self.demand_data = demand_data.demand_data_df
        self.inventory = Inventory(givens)

        # Define the action and observation spaces
        # Assuming actions are defined as tuples (data_center_id, server_type, action_type, quantity)
        '''
        To ChatGPT: Are they defined as tuples?
        '''
        self.action_space = spaces.MultiDiscrete([len(self.inventory.datacenters), len(self.givens.servers_df), 3, 10])
        self.observation_space = spaces.Box(low=0, high=np.inf, shape=(self._determine_obs_space_size(),), dtype=np.float32)
        self.state = self.reset()

    def _determine_obs_space_size(self):
        # Placeholder function to calculate the size of the observation space
        return len(self.inventory.datacenters) * 10  # Example complexity

    def reset(self):
        state = {
            "data_centers": [dc.summary() for dc in self.inventory.datacenters],
            "demand": [{
                "type": gen,
                "required_capacity": sum(row['capacity'] for _, row in self.demand_data[self.demand_data['server_generation'] == gen].iterrows()),
                "latency_sensitivity": row['latency_sensitivity']
            } for gen, row in self.demand_data.groupby('server_generation')]
        }
        return state

    def step(self, action):
        self.state = self._apply_action(action)
        '''
        To ChatGPT: We need to previde the self._calculate_reward() - "required_capacities" and "available_capacities" as arguments... could you please provide that?
        '''
        reward = self._calculate_reward()
        done = self._check_done()
        return self.state, reward, done, {}

    def _initialize_state(self):
        # Logic to initialize the environment state
        pass

    def _apply_action(self, action):
        # Logic to apply action and update state
        # Decode the action
        dc_id, server_type, action_type, quantity = action
        if action_type == 0:  # Deploy servers
            self.inventory.datacenters[dc_id].deploy_server(server_type, quantity)
        elif action_type == 1:  # Power down servers
            self.inventory.datacenters[dc_id].power_down_server(server_type, quantity)
        # Update state after action
        self.update_state()

    def _calculate_reward(self):
        # This is a placeholder for actual implementation.
        required_capacities = [demand['required_capacity'] for demand in self.state['demand']]
        available_capacities = [dc['available_capacity'] for dc in self.state['data_centers']]
        costs = self.calculate_costs()
        unmet_demand_penalty = sum(max(0, req - avail) for req, avail in zip(required_capacities, available_capacities))
        reward = -costs - unmet_demand_penalty
        return reward

    def _check_done(self):
        # Logic to check if the episode is done
        pass
    def reset(self):
    # Reset the environment to an initial state
        self.state = {
            "data_centers": [
                {
                    "identifier": dc.identifier,
                    "total_capacity": sum(server.capacity for server in dc.servers),
                    "available_capacity": sum(server.capacity for server in dc.servers if server.deployed),
                    "energy_cost": dc.cost_of_energy,
                    "servers": [
                        {
                            "type": server.generation,
                            "capacity_used": server.capacity if server.deployed else 0,
                            "uptime": server.operational_time,
                            "latency_sensitivity": server.latency_sensitivity
                        }
                        for server in dc.servers
                    ]
                }
                for dc in self.inventory.datacenters
            ],
            "demand": [
                {
                    "type": gen,
                    "required_capacity": sum(self.demand_data.loc[self.demand_data['server_generation'] == gen, 'required_capacity']),
                    "latency_sensitivity": row['latency_sensitivity']
                }
                for gen, row in self.demand_data.groupby('server_generation')
            ]
        }
        return self.state
    
    def deploy_server(self, server_type, quantity):
        for _ in range(quantity):
            server = Server(self.givens, server_type, "high", self, f"{self.identifier}_new")
            if self.can_add_server(server):
                self.add_server(server)
            else:
                break  # No more space to add servers

    def power_down_server(self, server_type, quantity):
        powered_down = 0
        for server in self.servers:
            if server.type == server_type and server.deployed and powered_down < quantity:
                server.decommission()  # Assuming decommission will power down the server
                powered_down += 1
            if powered_down >= quantity:
                break

    def calculate_costs(self):
        # Summing up costs from your existing methods or define new cost calculations
        total_cost = sum(dc.calculate_operating_cost() for dc in self.inventory.datacenters)
        return total_cost
    
    def _check_done(self):
        # Example completion condition
        return self.current_time_step >= self.max_time_steps
    
    def update_state(self):
        self.state['data_centers'] = [dc.summary() for dc in self.inventory.datacenters]
        # Include any other state properties that need updating

Filename: train_rl_agent.py
Path: train_rl_agent.py

import gym
from stable_baselines3 import PPO
from envs.server_management_env import ServerManagementEnv

# Assuming you have already defined or loaded `givens` and `demand_data`
from Classes import *
from application import *
from mysolution import *

# Create the custom environment
env = ServerManagementEnv(givens, actual_demand)

# Create the RL model
model = PPO('MlpPolicy', env, verbose=1)

# Train the model
model.learn(total_timesteps=10000)  # Adjust timesteps as needed

# Save the model
model.save("server_management_rl_model")

# Load the trained model
model = PPO.load("server_management_rl_model")

# Evaluate the model
obs = env.reset()
for _ in range(1000):  # Run for a number of steps to evaluate performance
    action, _states = model.predict(obs, deterministic=True)
    obs, rewards, done, info = env.step(action)
    if done:
        obs = env.reset()

