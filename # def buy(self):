    # def buy(self):
    #     '''
    #     self.demand.demand_data_df:

    #             <title: latency_sensitivity>  <time_step> <server_generation>   <high>    <low>  <medium>
    #     0                            1            CPU.S1   4346   7937    9235
    #     1                            1            GPU.S1     54     12       0
    #     2                            2            CPU.S1   8039  16884   19722
    #     3                            2            GPU.S1     90     29       2
    #     4                            3            CPU.S1  12276  21346   27524

    #     self.inventory.givens.datacenter_data_df:

    #     datacenter_id,cost_of_energy,latency_sensitivity,slots_capacity
    #     DC1,0.25,low,25245
    #     DC2,0.35,medium,15300
    #     DC3,0.65,high,7020
    #     DC4,0.75,high,8280

    #     self.inventory.selling_price_df:

    #     server_generation,latency_sensitivity,selling_price
    #     CPU.S1,low,10
    #     CPU.S2,low,10
    #     CPU.S3,low,11
    #     CPU.S4,low,12
    #     GPU.S1,low,1500
    #     GPU.S2,low,1600
    #     GPU.S3,low,2150
    #     CPU.S1,medium,15
    #     CPU.S2,medium,15
    #     CPU.S3,medium,16.5
    #     CPU.S4,medium,18
    #     GPU.S1,medium,1680
    #     GPU.S2,medium,1800
    #     GPU.S3,medium,2450
    #     CPU.S1,high,25
    #     CPU.S2,high,25
    #     CPU.S3,high,27.5
    #     CPU.S4,high,30
    #     GPU.S1,high,1875
    #     GPU.S2,high,2000
    #     GPU.S3,high,2700

    #     Meaning: if <server_generation> is CPU.S1 and <latency_sensitivity> is low, and we install CPU.S1 in DC1, then the selling price of CPU.S1 in DC1 is 10
    #     '''
    #     # STEP 1 - MAKE DECISION ON IF WE WANT TO BUY AT ALL

    #         # CURRENT BRUTE FORCE STRATEGY: <<<<<IF IT AIN'T BROKE, DON'T FIX IT>>>>>

    #     # STEP 2 - MAKE DECISION ON WHAT WE WANT TO BUY

    #         # STEP 2.A - DECIDE ON THE SERVER TYPE TO BUY IF WE WANT TO BUY AT ALL - Future Inputs - { Profit Margin and Demand Satisfaction }
    #         # 1. Check the demand for the next <magic_number_future> timesteps
    #         # 2. Check if the (if any) combination of [first server type + latency] mentioned in the current_demand (for current timestep) for which we have demand for right now will remain in demand for the next <magic_number_future> timesteps for the same combination because selling prices rely on combination
    #         # 3. Check if the (if any) combination of [first server type + latency] mentioned in the current_demand (for current timestep) for which we have demand for right now will have a meaningful profit margin for the next <magic_number_future> timesteps for the same combination because selling prices rely on combination
    #         # 4. Check if the (if any) combination of ... next <magic_number_future> timesteps ... because selling prices rely on combination
    #         # 5. Check if the (if any) combination of ... next <magic_number_future> timesteps ... because selling prices rely on combination
    #         # 6. This is a loop because the number of demand rows in current_demand is not fixed, so we need to check for all of them
    #         # 6. If there are two for instance, Compare the profit margins of the first and second server types and decide which one to prioritize on buying
    #         # Decide accordingly.

    #         # STEP 2.B - Now that we know what we want, REMOVE FOR THE SAKE OF BUYING SERVERS FOR DEMAND - FOR BETTER O VALUE
    #         #
    #         # Efforts to Maximize Life Span of Servers:
    #         #
    #         # Section where we have to decide if it would be appropriate to remove certain servers which are about to die based on
    #         # checking for loop (life remaining) to see if that server type has any meaningful demand, and if it does, does it have a meaningful profit margin
    #         # if replacing it with current demand server type, after checking its demand for the next couple of timesteps, would lead us to better profit,
    #         # then we can CONSIDER removing it if this decision yeilds better "O" value than keeping them. - { Maximizing Profit vs. Maximizing Life Span }
    #         #
    #         # We also need to take care of the customer satisfaction, so we need to make sure that we have enough servers to meet the demand
    #         # We can also check for the demand of the next couple of timesteps and see if we can meet the demand with the current servers even if they are about to die
    #         # If keeping them would lead to more demand satisfaction, and meeting this demand satisfaciton would yield better "O" value, then we can keep them. - { Maximizing Demand Satisfaction vs. Maximizing Life Span }

    #     # STEP 3 - ACTUALLY REMOVING SERVERS FOR DEMAND

    #         # PIECE OF CAKE

    #     # STEP 4 - ACTUALLY BUYING SERVERS FOR DEMAND

    #         # PIECE OF CAKE

    #     # STEP 5 - UPDATE INVENTORY
    #     pass
